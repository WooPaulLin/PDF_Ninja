# Form implementation generated from reading ui file 'PDFninja2.ui'
#
# Created by: PyQt6 UI code generator 6.6.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtPdfWidgets import QPdfView
from PyQt6.QtPdf import QPdfDocument
from datetime import date
import difflib

class Ui_Form(object):

    def setupUi(self, Form):
        
        Form.setObjectName("Form")
        Form.resize(1300, 850)
        Form.setTabletTracking(False)
        Form.setFixedSize(1300, 850)
        self.modeTab = QtWidgets.QTabWidget(parent=Form)
        self.modeTab.setGeometry(QtCore.QRect(5, 40, 1290, 861))
        self.modeTab.setObjectName("modeTab")
        self.mode = 0
        def mode_change():
            num = self.modeTab.currentIndex()
            self.mode = num
            if self.mode == 1:
                self.export_btn.setDisabled(True)
            else:
                self.export_btn.setDisabled(False)
            print(num)
        self.modeTab.currentChanged.connect(mode_change)
    


### Button

        self.select_file_btn = QtWidgets.QPushButton(parent=Form)
        self.select_file_btn.setGeometry(QtCore.QRect(20, 10, 113, 32))
        self.select_file_btn.setObjectName("select_file_btn")
        
        self.file_path = None
        self.pass_word = None

        self.c1 = None
        self.c2 = None
        def open_file():
            try:
                filePath , filterType = QtWidgets.QFileDialog.getOpenFileNames(filter='PDF (*.pdf)')
                if self.mode == 0:
                    k = 1  # 選擇檔案對話視窗
                else: k = 2

                for p in range(k):
                    self.pdf.load(filePath[p])

                    if self.pdf.status() == QPdfDocument.Status.Error:
                        self.pass_word = warn(0) #輸入密碼
                        self.pdf.setPassword(self.pass_word) 
                        self.pdf.load(filePath[p])

                    self.file_path = filePath[p]
                    self.text = '\n'.join([self.pdf.getAllText(i).text() for i in range(self.pdf.pageCount())])
                    if self.mode == 0:
                        print('convert')
                        self.convertPdfView.setDocument(self.pdf)
                        self.convertPdfView.show()
                    elif self.mode == 1:
                        print('compare')
                        if p == 0:
                            self.compareTextBrowser1.clear()
                            self.compareTextBrowser1.setText(self.text)
                            self.c1 =self.text
                            self.f1_path.setText(self.file_path.split('/')[-1])
                            print('compare1_success')
                        elif p == 1:
                            self.compareTextBrowser2.clear()
                            self.compareTextBrowser2.setText(self.text)
                            self.c2 = self.text
                            self.f2_path.setText(self.file_path.split('/')[-1])
                            print('compare2_success')
            except:
                pass

        self.select_file_btn.clicked.connect(open_file)

        self.export_btn = QtWidgets.QPushButton(parent=Form)
        self.export_btn.setGeometry(QtCore.QRect(140, 10, 113, 32))
        self.export_btn.setObjectName("export_btn")

        def save_file(mode=self.mode):
            if self.text != None:
                save_path = QtWidgets.QFileDialog.getExistingDirectory()
                try:
                    save_path = save_path+'/'+''.join(self.file_path.split('/')[-1].split('.')[0]+f'_{date.today()}.txt')
                    print(save_path)
                    with open(save_path, 'w') as f:
                        f.write(self.text)
                    f.close()
                    warn(5)
                except:
                    warn(31)
            else:
                warn(32)

        self.export_btn.clicked.connect(save_file)

### Convert
        self.convert = QtWidgets.QWidget()
        self.convert.setObjectName("convert")

        self.horizontalLayoutWidget = QtWidgets.QWidget(parent=self.convert)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(0, 0, 1290, 750))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")

        self.convertLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.convertLayout.setContentsMargins(0, 0, 0, 0)
        self.convertLayout.setObjectName("convertLayout")

        self.convertPdfView = QPdfView(self.horizontalLayoutWidget)
        self.convertPdfView.setPageMode(QPdfView.PageMode.MultiPage)
        self.convertPdfView.setObjectName("convertPdfView")
        self.pdf = QPdfDocument(None)
        self.convertLayout.addWidget(self.convertPdfView)
        

        self.convertTextBrowser = QtWidgets.QTextBrowser(parent=self.horizontalLayoutWidget)
        self.convertTextBrowser.setObjectName("convertTextBrowser")
        self.convertLayout.addWidget(self.convertTextBrowser)

        self.covert_btn = QtWidgets.QPushButton(parent=self.convert)
        self.covert_btn.setGeometry(QtCore.QRect(585, 750, 113, 32))
        self.covert_btn.setObjectName("covert_btn")

        self.text = None
        def text_extractor():
            self.text = ''
            if self.pdf.pageCount() != 0:
                try:
                    corpus = '\n'.join([self.pdf.getAllText(i).text() for i in range(self.pdf.pageCount())])
                    self.text = corpus
                except:
                    warn(4)
            else:
                warn(12)
            self.convertTextBrowser.clear()
            self.convertTextBrowser.setText(self.text)
        self.covert_btn.clicked.connect(text_extractor)



        self.modeTab.addTab(self.convert, "")
    


 #### COPARE       
        self.compare = QtWidgets.QWidget()
        self.compare.setObjectName("compare")
        self.horizontalLayoutWidget_2 = QtWidgets.QWidget(parent=self.compare)
        self.horizontalLayoutWidget_2.setGeometry(QtCore.QRect(0, -1, 1290, 750))
        self.horizontalLayoutWidget_2.setObjectName("horizontalLayoutWidget_2")
        self.compareLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_2)
        self.compareLayout.setContentsMargins(0, 0, 0, 0)
        self.compareLayout.setObjectName("compareLayout")
        self.compareTextBrowser1 = QtWidgets.QTextBrowser(parent=self.horizontalLayoutWidget_2)
        self.compareTextBrowser1.setObjectName("compareTextBrowser1")
        self.compareLayout.addWidget(self.compareTextBrowser1)
        self.compareTextBrowser2 = QtWidgets.QTextBrowser(parent=self.horizontalLayoutWidget_2)
        self.compareTextBrowser2.setObjectName("compareTextBrowser2")
        self.compareLayout.addWidget(self.compareTextBrowser2)


        self.compare_btn = QtWidgets.QPushButton(parent=self.compare)
        self.compare_btn.setGeometry(QtCore.QRect(585, 750, 113, 32))
        self.compare_btn.setObjectName("compare_btn")
        def compare_diff():
            try:
                self.c1 = self.c1.splitlines()
                self.c2 = self.c2.splitlines()
                s = difflib.SequenceMatcher(None, self.c1, self.c2)
                opc = s.get_opcodes()
            except:
                warn(12)
                return

            c1_comp = []
            c2_comp = []
            for tag, o1, o2, n1, n2 in opc:
                if tag == 'replace':
                    a = ' '.join(self.c1[o1:o2]).split(' ')
                    b = ' '.join(self.c2[n1:n2]).split(' ')
                    x = difflib.SequenceMatcher(None,a,b)
                    
                    def comp(c):
                        tmp1 = []
                        tmp2 = []
                        for tag, o1, o2, n1, n2 in c.get_opcodes():
                            if tag == "replace":
                                tmp1.append(
                                    '<span style="background-color:#85C1E9">'
                                    + " ".join(a[o1:o2])
                                    + "</span>"
                                )
                                tmp2.append(
                                    '<span style="background-color:#85C1E9">'
                                    + " ".join(b[n1:n2])
                                    + "</span>"
                                )
                            elif tag == "insert":
                                tmp1.append(
                                    '<span>'
                                    + " ".join(a[o1:o2])
                                    + "</span>"
                                )
                                tmp2.append(
                                    '<span style="background-color:#58D68D">'
                                    + " ".join(b[n1:n2])
                                    + "</span>"
                                )
                            elif tag == "delete":
                                tmp1.append(
                                    '<span style="background-color:#F5B7B1">'
                                    + " ".join(a[o1:o2])
                                    + "</span>"
                                )
                                tmp2.append(
                                    '<span>'
                                    + " ".join(b[n1:n2])
                                    + "</span>"
                                )
                            else:
                                tmp1.append("<span>" + " ".join(a[o1:o2]) + "</span>")
                                tmp2.append("<span>" + " ".join(a[o1:o2]) + "</span>")
                        return "<br>".join(tmp1), "<br>".join(tmp2)

                    otmp, ntmp = comp(x)
                    c1_comp.append(otmp)
                    c2_comp.append(ntmp)
 
                elif tag == 'insert':
                    c2_comp.append('<span style="color:green; display:inline">' + '<br>'.join(self.c2[n1:n2]) + "</span>")
                elif tag == 'delete':
                    c1_comp.append('<span style="color:red; display:inline">' + '<br>'.join(self.c1[o1:o2]) + "</span>")
                else:
                    c1_comp.append("<br>".join(self.c1[o1:o2]))
                    c2_comp.append("<br>".join(self.c2[n1:n2]))
            temp = '''<html>
            </head>
            <body>
            '''
            self.c1 = (temp+''.join(''.join(c1_comp))+'''</body></html>''').replace('\\n','<br>')
            self.compareTextBrowser1.clear()
            self.compareTextBrowser1.setHtml(self.c1)
            self.c2 = (temp+''.join(''.join(c2_comp))+'''</body></html>''').replace('\\n','<br>')
            self.compareTextBrowser2.clear()
            self.compareTextBrowser2.setHtml(self.c2)
        self.compare_btn.clicked.connect(compare_diff)

        self.f1_path = QtWidgets.QLabel(parent=self.compare)
        self.f1_path.setGeometry(QtCore.QRect(370, 800,241,21))
        self.f1_path.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.f2_path = QtWidgets.QLabel(parent=self.compare)
        self.f2_path.setGeometry(QtCore.QRect(810, 800,241,21))
        self.f2_path.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)


        self.modeTab.addTab(self.compare, "")


        self.retranslateUi(Form)
        # self.modeTab.setCurrentIndex(1)
        QtCore.QMetaObject.connectSlotsByName(Form)

        def warn(n):
            mbox = QtWidgets.QMessageBox(QtWidgets.QWidget())
            passw = QtWidgets.QInputDialog(QtWidgets.QWidget())
            
            if n==11:
                mbox.information(QtWidgets.QWidget(), 'warning', 'Wrong Data Type: Not PDF File')
            elif n == 12:
                mbox.question(QtWidgets.QWidget(), 'warning', 'No File Upload')
            elif n == 31:
                mbox.question(QtWidgets.QWidget(), 'warning', 'Wrong saving path?')
            elif n == 32:
                mbox.warning(QtWidgets.QWidget(), 'warning', 'No Translated File!')
            elif n == 4:
                mbox.critical(QtWidgets.QWidget(), 'warning', 'Something Wrong....')
            elif n == 5:
                mbox.critical(QtWidgets.QWidget(), 'information', 'Success!')
            elif n == 0:
                p, ok = passw.getText(QtWidgets.QWidget(), '','input password')
                return p

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "PDF ninja"))
        self.modeTab.setWhatsThis(_translate("Form", "<html><head/><body><p>Convert</p></body></html>"))
        self.covert_btn.setText(_translate("Form", "Convert"))
        self.modeTab.setTabText(self.modeTab.indexOf(self.convert), _translate("Form", "Convert"))
        self.compare_btn.setText(_translate("Form", "Compare"))
        self.modeTab.setTabText(self.modeTab.indexOf(self.compare), _translate("Form", "Compare"))
        self.select_file_btn.setText(_translate("Form", "Select File"))
        self.export_btn.setText(_translate("Form", "Export"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Ui_Form()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec())
